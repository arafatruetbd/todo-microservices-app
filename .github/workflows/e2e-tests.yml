name: E2E Tests

on:
  push:
    branches: [master]
  pull_request:

jobs:
  e2e:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repo
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # 3. Cache Yarn deps
      - name: Cache Yarn
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/yarn
            e2e/node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('e2e/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      # 4. Install E2E dependencies
      - name: Install E2E dependencies
        run: cd e2e && yarn install --frozen-lockfile

      # 5. Cache Playwright browsers
      - name: Cache Playwright
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('e2e/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      # 6. Install Playwright browsers
      - name: Install Playwright browsers
        run: cd e2e && npx playwright install --with-deps

      # 7. Generate .env for docker-compose
      - name: Create .env file
        run: |
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASS=${{ secrets.DB_PASS }}" >> .env
          echo "USER_DB_NAME=${{ secrets.USER_DB_NAME }}" >> .env
          echo "USER_DB_PORT=${{ secrets.USER_DB_PORT }}" >> .env
          echo "TODO_DB_NAME=${{ secrets.TODO_DB_NAME }}" >> .env
          echo "TODO_DB_PORT=${{ secrets.TODO_DB_PORT }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env

      # 8. Docker buildx + cache setup
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # 9. Start services with docker-compose
      - name: Start services
        run: docker compose up -d --build
        env:
          DOCKER_BUILDKIT: 1
          BUILDKIT_PROGRESS: plain

      # 10. Debug: check containers
      - name: Docker status
        run: docker ps -a

      - name: Docker logs (backend + frontend)
        run: docker compose logs --tail=200 user-service todo-service frontend

      # 11. Wait for backend & frontend to be healthy
      - name: Wait for API & Client
        run: |
          npx wait-on --timeout 120000 \
            http://localhost:3000/ \
            http://localhost:5000/health \
            http://localhost:5001/health

      # 12. Dump logs if wait-on fails
      - name: Dump logs on failure
        if: failure()
        run: |
          echo "ðŸ”´ Services did not start in time. Dumping logs..."
          docker ps -a
          docker compose logs --tail=200

      # 13. Run Playwright tests
      - name: Run Playwright tests
        run: cd e2e && yarn test --reporter=dot

      # 14. Upload Playwright HTML report (artifact)
      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: e2e/playwright-report
          retention-days: 7
